/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mx.movistar.col.lead.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import mx.movistar.col.lead.model.BlackList;
import mx.movistar.col.lead.model.BlackListModel;
import mx.movistar.col.lead.model.BlackListSoap;

/**
 * The base model implementation for the BlackList service. Represents a row in the &quot;LEAD_BlackList&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>BlackListModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BlackListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BlackListImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BlackListModelImpl
	extends BaseModelImpl<BlackList> implements BlackListModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a black list model instance should use the <code>BlackList</code> interface instead.
	 */
	public static final String TABLE_NAME = "LEAD_BlackList";

	public static final Object[][] TABLE_COLUMNS = {
		{"blackListId", Types.BIGINT}, {"numero", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("blackListId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("numero", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LEAD_BlackList (blackListId LONG not null primary key,numero VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table LEAD_BlackList";

	public static final String ORDER_BY_JPQL =
		" ORDER BY blackList.blackListId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LEAD_BlackList.blackListId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.mx.movistar.col.lead.model.BlackList"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.mx.movistar.col.lead.model.BlackList"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.mx.movistar.col.lead.model.BlackList"),
		true);

	public static final long NUMERO_COLUMN_BITMASK = 1L;

	public static final long BLACKLISTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BlackList toModel(BlackListSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BlackList model = new BlackListImpl();

		model.setBlackListId(soapModel.getBlackListId());
		model.setNumero(soapModel.getNumero());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BlackList> toModels(BlackListSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BlackList> models = new ArrayList<BlackList>(soapModels.length);

		for (BlackListSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"lock.expiration.time.mx.movistar.col.lead.model.BlackList"));

	public BlackListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _blackListId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBlackListId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _blackListId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BlackList.class;
	}

	@Override
	public String getModelClassName() {
		return BlackList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BlackList, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BlackList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BlackList, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((BlackList)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BlackList, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BlackList, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BlackList)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BlackList, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BlackList, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, BlackList>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			BlackList.class.getClassLoader(), BlackList.class,
			ModelWrapper.class);

		try {
			Constructor<BlackList> constructor =
				(Constructor<BlackList>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<BlackList, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BlackList, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BlackList, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<BlackList, Object>>();
		Map<String, BiConsumer<BlackList, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<BlackList, ?>>();

		attributeGetterFunctions.put(
			"blackListId",
			new Function<BlackList, Object>() {

				@Override
				public Object apply(BlackList blackList) {
					return blackList.getBlackListId();
				}

			});
		attributeSetterBiConsumers.put(
			"blackListId",
			new BiConsumer<BlackList, Object>() {

				@Override
				public void accept(BlackList blackList, Object blackListId) {
					blackList.setBlackListId((Long)blackListId);
				}

			});
		attributeGetterFunctions.put(
			"numero",
			new Function<BlackList, Object>() {

				@Override
				public Object apply(BlackList blackList) {
					return blackList.getNumero();
				}

			});
		attributeSetterBiConsumers.put(
			"numero",
			new BiConsumer<BlackList, Object>() {

				@Override
				public void accept(BlackList blackList, Object numero) {
					blackList.setNumero((String)numero);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getBlackListId() {
		return _blackListId;
	}

	@Override
	public void setBlackListId(long blackListId) {
		_blackListId = blackListId;
	}

	@JSON
	@Override
	public String getNumero() {
		if (_numero == null) {
			return "";
		}
		else {
			return _numero;
		}
	}

	@Override
	public void setNumero(String numero) {
		_columnBitmask |= NUMERO_COLUMN_BITMASK;

		if (_originalNumero == null) {
			_originalNumero = _numero;
		}

		_numero = numero;
	}

	public String getOriginalNumero() {
		return GetterUtil.getString(_originalNumero);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, BlackList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BlackList toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BlackList>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BlackListImpl blackListImpl = new BlackListImpl();

		blackListImpl.setBlackListId(getBlackListId());
		blackListImpl.setNumero(getNumero());

		blackListImpl.resetOriginalValues();

		return blackListImpl;
	}

	@Override
	public int compareTo(BlackList blackList) {
		long primaryKey = blackList.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BlackList)) {
			return false;
		}

		BlackList blackList = (BlackList)obj;

		long primaryKey = blackList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BlackListModelImpl blackListModelImpl = this;

		blackListModelImpl._originalNumero = blackListModelImpl._numero;

		blackListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BlackList> toCacheModel() {
		BlackListCacheModel blackListCacheModel = new BlackListCacheModel();

		blackListCacheModel.blackListId = getBlackListId();

		blackListCacheModel.numero = getNumero();

		String numero = blackListCacheModel.numero;

		if ((numero != null) && (numero.length() == 0)) {
			blackListCacheModel.numero = null;
		}

		return blackListCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BlackList, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BlackList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BlackList, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((BlackList)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BlackList, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BlackList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BlackList, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BlackList)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BlackList>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _blackListId;
	private String _numero;
	private String _originalNumero;
	private long _columnBitmask;
	private BlackList _escapedModel;

}
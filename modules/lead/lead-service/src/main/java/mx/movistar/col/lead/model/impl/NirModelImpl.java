/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mx.movistar.col.lead.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import mx.movistar.col.lead.model.Nir;
import mx.movistar.col.lead.model.NirModel;
import mx.movistar.col.lead.model.NirSoap;
import mx.movistar.col.lead.service.persistence.NirPK;

/**
 * The base model implementation for the Nir service. Represents a row in the &quot;LEAD_Nir&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>NirModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NirImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NirImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class NirModelImpl extends BaseModelImpl<Nir> implements NirModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nir model instance should use the <code>Nir</code> interface instead.
	 */
	public static final String TABLE_NAME = "LEAD_Nir";

	public static final Object[][] TABLE_COLUMNS = {
		{"lada", Types.VARCHAR}, {"serie", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lada", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serie", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LEAD_Nir (lada VARCHAR(75) not null,serie VARCHAR(75) not null,primary key (lada, serie))";

	public static final String TABLE_SQL_DROP = "drop table LEAD_Nir";

	public static final String ORDER_BY_JPQL =
		" ORDER BY nir.id.lada ASC, nir.id.serie ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LEAD_Nir.lada ASC, LEAD_Nir.serie ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.mx.movistar.col.lead.model.Nir"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.mx.movistar.col.lead.model.Nir"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.mx.movistar.col.lead.model.Nir"),
		true);

	public static final long LADA_COLUMN_BITMASK = 1L;

	public static final long SERIE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Nir toModel(NirSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Nir model = new NirImpl();

		model.setLada(soapModel.getLada());
		model.setSerie(soapModel.getSerie());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Nir> toModels(NirSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Nir> models = new ArrayList<Nir>(soapModels.length);

		for (NirSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"lock.expiration.time.mx.movistar.col.lead.model.Nir"));

	public NirModelImpl() {
	}

	@Override
	public NirPK getPrimaryKey() {
		return new NirPK(_lada, _serie);
	}

	@Override
	public void setPrimaryKey(NirPK primaryKey) {
		setLada(primaryKey.lada);
		setSerie(primaryKey.serie);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new NirPK(_lada, _serie);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((NirPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Nir.class;
	}

	@Override
	public String getModelClassName() {
		return Nir.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Nir, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Nir, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Nir, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Nir)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Nir, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Nir, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Nir)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Nir, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Nir, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Nir>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Nir.class.getClassLoader(), Nir.class, ModelWrapper.class);

		try {
			Constructor<Nir> constructor =
				(Constructor<Nir>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Nir, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Nir, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Nir, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Nir, Object>>();
		Map<String, BiConsumer<Nir, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Nir, ?>>();

		attributeGetterFunctions.put(
			"lada",
			new Function<Nir, Object>() {

				@Override
				public Object apply(Nir nir) {
					return nir.getLada();
				}

			});
		attributeSetterBiConsumers.put(
			"lada",
			new BiConsumer<Nir, Object>() {

				@Override
				public void accept(Nir nir, Object lada) {
					nir.setLada((String)lada);
				}

			});
		attributeGetterFunctions.put(
			"serie",
			new Function<Nir, Object>() {

				@Override
				public Object apply(Nir nir) {
					return nir.getSerie();
				}

			});
		attributeSetterBiConsumers.put(
			"serie",
			new BiConsumer<Nir, Object>() {

				@Override
				public void accept(Nir nir, Object serie) {
					nir.setSerie((String)serie);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getLada() {
		if (_lada == null) {
			return "";
		}
		else {
			return _lada;
		}
	}

	@Override
	public void setLada(String lada) {
		_columnBitmask |= LADA_COLUMN_BITMASK;

		if (_originalLada == null) {
			_originalLada = _lada;
		}

		_lada = lada;
	}

	public String getOriginalLada() {
		return GetterUtil.getString(_originalLada);
	}

	@JSON
	@Override
	public String getSerie() {
		if (_serie == null) {
			return "";
		}
		else {
			return _serie;
		}
	}

	@Override
	public void setSerie(String serie) {
		_columnBitmask |= SERIE_COLUMN_BITMASK;

		if (_originalSerie == null) {
			_originalSerie = _serie;
		}

		_serie = serie;
	}

	public String getOriginalSerie() {
		return GetterUtil.getString(_originalSerie);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Nir toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Nir> escapedModelProxyProviderFunction =
				EscapedModelProxyProviderFunctionHolder.
					_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NirImpl nirImpl = new NirImpl();

		nirImpl.setLada(getLada());
		nirImpl.setSerie(getSerie());

		nirImpl.resetOriginalValues();

		return nirImpl;
	}

	@Override
	public int compareTo(Nir nir) {
		NirPK primaryKey = nir.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Nir)) {
			return false;
		}

		Nir nir = (Nir)obj;

		NirPK primaryKey = nir.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NirModelImpl nirModelImpl = this;

		nirModelImpl._originalLada = nirModelImpl._lada;

		nirModelImpl._originalSerie = nirModelImpl._serie;

		nirModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Nir> toCacheModel() {
		NirCacheModel nirCacheModel = new NirCacheModel();

		nirCacheModel.nirPK = getPrimaryKey();

		nirCacheModel.lada = getLada();

		String lada = nirCacheModel.lada;

		if ((lada != null) && (lada.length() == 0)) {
			nirCacheModel.lada = null;
		}

		nirCacheModel.serie = getSerie();

		String serie = nirCacheModel.serie;

		if ((serie != null) && (serie.length() == 0)) {
			nirCacheModel.serie = null;
		}

		return nirCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Nir, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Nir, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Nir, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Nir)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Nir, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Nir, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Nir, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Nir)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Nir>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _lada;
	private String _originalLada;
	private String _serie;
	private String _originalSerie;
	private long _columnBitmask;
	private Nir _escapedModel;

}
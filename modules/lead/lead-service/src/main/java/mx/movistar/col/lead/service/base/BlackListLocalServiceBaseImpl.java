/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mx.movistar.col.lead.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import mx.movistar.col.lead.model.BlackList;
import mx.movistar.col.lead.service.BlackListLocalService;
import mx.movistar.col.lead.service.persistence.BlackListPersistence;
import mx.movistar.col.lead.service.persistence.CallCenterFinder;
import mx.movistar.col.lead.service.persistence.CallCenterPersistence;
import mx.movistar.col.lead.service.persistence.CampaignPersistence;
import mx.movistar.col.lead.service.persistence.LeadFinder;
import mx.movistar.col.lead.service.persistence.LeadPersistence;
import mx.movistar.col.lead.service.persistence.LeadScoringPersistence;
import mx.movistar.col.lead.service.persistence.NirPersistence;

/**
 * Provides the base implementation for the black list local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link mx.movistar.col.lead.service.impl.BlackListLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see mx.movistar.col.lead.service.impl.BlackListLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class BlackListLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements BlackListLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>BlackListLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>mx.movistar.col.lead.service.BlackListLocalServiceUtil</code>.
	 */

	/**
	 * Adds the black list to the database. Also notifies the appropriate model listeners.
	 *
	 * @param blackList the black list
	 * @return the black list that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BlackList addBlackList(BlackList blackList) {
		blackList.setNew(true);

		return blackListPersistence.update(blackList);
	}

	/**
	 * Creates a new black list with the primary key. Does not add the black list to the database.
	 *
	 * @param blackListId the primary key for the new black list
	 * @return the new black list
	 */
	@Override
	@Transactional(enabled = false)
	public BlackList createBlackList(long blackListId) {
		return blackListPersistence.create(blackListId);
	}

	/**
	 * Deletes the black list with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param blackListId the primary key of the black list
	 * @return the black list that was removed
	 * @throws PortalException if a black list with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BlackList deleteBlackList(long blackListId) throws PortalException {
		return blackListPersistence.remove(blackListId);
	}

	/**
	 * Deletes the black list from the database. Also notifies the appropriate model listeners.
	 *
	 * @param blackList the black list
	 * @return the black list that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BlackList deleteBlackList(BlackList blackList) {
		return blackListPersistence.remove(blackList);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			BlackList.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return blackListPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mx.movistar.col.lead.model.impl.BlackListModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return blackListPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mx.movistar.col.lead.model.impl.BlackListModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return blackListPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return blackListPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return blackListPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public BlackList fetchBlackList(long blackListId) {
		return blackListPersistence.fetchByPrimaryKey(blackListId);
	}

	/**
	 * Returns the black list with the primary key.
	 *
	 * @param blackListId the primary key of the black list
	 * @return the black list
	 * @throws PortalException if a black list with the primary key could not be found
	 */
	@Override
	public BlackList getBlackList(long blackListId) throws PortalException {
		return blackListPersistence.findByPrimaryKey(blackListId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(blackListLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BlackList.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("blackListId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			blackListLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(BlackList.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"blackListId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(blackListLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BlackList.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("blackListId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return blackListLocalService.deleteBlackList((BlackList)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return blackListPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the black lists.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mx.movistar.col.lead.model.impl.BlackListModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of black lists
	 * @param end the upper bound of the range of black lists (not inclusive)
	 * @return the range of black lists
	 */
	@Override
	public List<BlackList> getBlackLists(int start, int end) {
		return blackListPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of black lists.
	 *
	 * @return the number of black lists
	 */
	@Override
	public int getBlackListsCount() {
		return blackListPersistence.countAll();
	}

	/**
	 * Updates the black list in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param blackList the black list
	 * @return the black list that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BlackList updateBlackList(BlackList blackList) {
		return blackListPersistence.update(blackList);
	}

	/**
	 * Returns the black list local service.
	 *
	 * @return the black list local service
	 */
	public BlackListLocalService getBlackListLocalService() {
		return blackListLocalService;
	}

	/**
	 * Sets the black list local service.
	 *
	 * @param blackListLocalService the black list local service
	 */
	public void setBlackListLocalService(
		BlackListLocalService blackListLocalService) {

		this.blackListLocalService = blackListLocalService;
	}

	/**
	 * Returns the black list persistence.
	 *
	 * @return the black list persistence
	 */
	public BlackListPersistence getBlackListPersistence() {
		return blackListPersistence;
	}

	/**
	 * Sets the black list persistence.
	 *
	 * @param blackListPersistence the black list persistence
	 */
	public void setBlackListPersistence(
		BlackListPersistence blackListPersistence) {

		this.blackListPersistence = blackListPersistence;
	}

	/**
	 * Returns the call center local service.
	 *
	 * @return the call center local service
	 */
	public mx.movistar.col.lead.service.CallCenterLocalService
		getCallCenterLocalService() {

		return callCenterLocalService;
	}

	/**
	 * Sets the call center local service.
	 *
	 * @param callCenterLocalService the call center local service
	 */
	public void setCallCenterLocalService(
		mx.movistar.col.lead.service.CallCenterLocalService
			callCenterLocalService) {

		this.callCenterLocalService = callCenterLocalService;
	}

	/**
	 * Returns the call center persistence.
	 *
	 * @return the call center persistence
	 */
	public CallCenterPersistence getCallCenterPersistence() {
		return callCenterPersistence;
	}

	/**
	 * Sets the call center persistence.
	 *
	 * @param callCenterPersistence the call center persistence
	 */
	public void setCallCenterPersistence(
		CallCenterPersistence callCenterPersistence) {

		this.callCenterPersistence = callCenterPersistence;
	}

	/**
	 * Returns the call center finder.
	 *
	 * @return the call center finder
	 */
	public CallCenterFinder getCallCenterFinder() {
		return callCenterFinder;
	}

	/**
	 * Sets the call center finder.
	 *
	 * @param callCenterFinder the call center finder
	 */
	public void setCallCenterFinder(CallCenterFinder callCenterFinder) {
		this.callCenterFinder = callCenterFinder;
	}

	/**
	 * Returns the campaign local service.
	 *
	 * @return the campaign local service
	 */
	public mx.movistar.col.lead.service.CampaignLocalService
		getCampaignLocalService() {

		return campaignLocalService;
	}

	/**
	 * Sets the campaign local service.
	 *
	 * @param campaignLocalService the campaign local service
	 */
	public void setCampaignLocalService(
		mx.movistar.col.lead.service.CampaignLocalService
			campaignLocalService) {

		this.campaignLocalService = campaignLocalService;
	}

	/**
	 * Returns the campaign persistence.
	 *
	 * @return the campaign persistence
	 */
	public CampaignPersistence getCampaignPersistence() {
		return campaignPersistence;
	}

	/**
	 * Sets the campaign persistence.
	 *
	 * @param campaignPersistence the campaign persistence
	 */
	public void setCampaignPersistence(
		CampaignPersistence campaignPersistence) {

		this.campaignPersistence = campaignPersistence;
	}

	/**
	 * Returns the lead local service.
	 *
	 * @return the lead local service
	 */
	public mx.movistar.col.lead.service.LeadLocalService getLeadLocalService() {
		return leadLocalService;
	}

	/**
	 * Sets the lead local service.
	 *
	 * @param leadLocalService the lead local service
	 */
	public void setLeadLocalService(
		mx.movistar.col.lead.service.LeadLocalService leadLocalService) {

		this.leadLocalService = leadLocalService;
	}

	/**
	 * Returns the lead persistence.
	 *
	 * @return the lead persistence
	 */
	public LeadPersistence getLeadPersistence() {
		return leadPersistence;
	}

	/**
	 * Sets the lead persistence.
	 *
	 * @param leadPersistence the lead persistence
	 */
	public void setLeadPersistence(LeadPersistence leadPersistence) {
		this.leadPersistence = leadPersistence;
	}

	/**
	 * Returns the lead finder.
	 *
	 * @return the lead finder
	 */
	public LeadFinder getLeadFinder() {
		return leadFinder;
	}

	/**
	 * Sets the lead finder.
	 *
	 * @param leadFinder the lead finder
	 */
	public void setLeadFinder(LeadFinder leadFinder) {
		this.leadFinder = leadFinder;
	}

	/**
	 * Returns the lead scoring local service.
	 *
	 * @return the lead scoring local service
	 */
	public mx.movistar.col.lead.service.LeadScoringLocalService
		getLeadScoringLocalService() {

		return leadScoringLocalService;
	}

	/**
	 * Sets the lead scoring local service.
	 *
	 * @param leadScoringLocalService the lead scoring local service
	 */
	public void setLeadScoringLocalService(
		mx.movistar.col.lead.service.LeadScoringLocalService
			leadScoringLocalService) {

		this.leadScoringLocalService = leadScoringLocalService;
	}

	/**
	 * Returns the lead scoring persistence.
	 *
	 * @return the lead scoring persistence
	 */
	public LeadScoringPersistence getLeadScoringPersistence() {
		return leadScoringPersistence;
	}

	/**
	 * Sets the lead scoring persistence.
	 *
	 * @param leadScoringPersistence the lead scoring persistence
	 */
	public void setLeadScoringPersistence(
		LeadScoringPersistence leadScoringPersistence) {

		this.leadScoringPersistence = leadScoringPersistence;
	}

	/**
	 * Returns the nir local service.
	 *
	 * @return the nir local service
	 */
	public mx.movistar.col.lead.service.NirLocalService getNirLocalService() {
		return nirLocalService;
	}

	/**
	 * Sets the nir local service.
	 *
	 * @param nirLocalService the nir local service
	 */
	public void setNirLocalService(
		mx.movistar.col.lead.service.NirLocalService nirLocalService) {

		this.nirLocalService = nirLocalService;
	}

	/**
	 * Returns the nir persistence.
	 *
	 * @return the nir persistence
	 */
	public NirPersistence getNirPersistence() {
		return nirPersistence;
	}

	/**
	 * Sets the nir persistence.
	 *
	 * @param nirPersistence the nir persistence
	 */
	public void setNirPersistence(NirPersistence nirPersistence) {
		this.nirPersistence = nirPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"mx.movistar.col.lead.model.BlackList", blackListLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"mx.movistar.col.lead.model.BlackList");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return BlackListLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return BlackList.class;
	}

	protected String getModelClassName() {
		return BlackList.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = blackListPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = BlackListLocalService.class)
	protected BlackListLocalService blackListLocalService;

	@BeanReference(type = BlackListPersistence.class)
	protected BlackListPersistence blackListPersistence;

	@BeanReference(
		type = mx.movistar.col.lead.service.CallCenterLocalService.class
	)
	protected mx.movistar.col.lead.service.CallCenterLocalService
		callCenterLocalService;

	@BeanReference(type = CallCenterPersistence.class)
	protected CallCenterPersistence callCenterPersistence;

	@BeanReference(type = CallCenterFinder.class)
	protected CallCenterFinder callCenterFinder;

	@BeanReference(
		type = mx.movistar.col.lead.service.CampaignLocalService.class
	)
	protected mx.movistar.col.lead.service.CampaignLocalService
		campaignLocalService;

	@BeanReference(type = CampaignPersistence.class)
	protected CampaignPersistence campaignPersistence;

	@BeanReference(type = mx.movistar.col.lead.service.LeadLocalService.class)
	protected mx.movistar.col.lead.service.LeadLocalService leadLocalService;

	@BeanReference(type = LeadPersistence.class)
	protected LeadPersistence leadPersistence;

	@BeanReference(type = LeadFinder.class)
	protected LeadFinder leadFinder;

	@BeanReference(
		type = mx.movistar.col.lead.service.LeadScoringLocalService.class
	)
	protected mx.movistar.col.lead.service.LeadScoringLocalService
		leadScoringLocalService;

	@BeanReference(type = LeadScoringPersistence.class)
	protected LeadScoringPersistence leadScoringPersistence;

	@BeanReference(type = mx.movistar.col.lead.service.NirLocalService.class)
	protected mx.movistar.col.lead.service.NirLocalService nirLocalService;

	@BeanReference(type = NirPersistence.class)
	protected NirPersistence nirPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}
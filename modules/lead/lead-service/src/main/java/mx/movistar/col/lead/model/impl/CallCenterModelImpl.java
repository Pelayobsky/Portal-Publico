/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mx.movistar.col.lead.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import mx.movistar.col.lead.model.CallCenter;
import mx.movistar.col.lead.model.CallCenterModel;
import mx.movistar.col.lead.model.CallCenterSoap;

/**
 * The base model implementation for the CallCenter service. Represents a row in the &quot;LEAD_CallCenter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CallCenterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CallCenterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CallCenterImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CallCenterModelImpl
	extends BaseModelImpl<CallCenter> implements CallCenterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a call center model instance should use the <code>CallCenter</code> interface instead.
	 */
	public static final String TABLE_NAME = "LEAD_CallCenter";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"callCenterId", Types.BIGINT},
		{"campaignId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"dueDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"source", Types.VARCHAR}, {"type_", Types.VARCHAR},
		{"product", Types.VARCHAR}, {"hasEmail", Types.BOOLEAN},
		{"hasPhone", Types.BOOLEAN}, {"hasName", Types.BOOLEAN},
		{"extra1", Types.BOOLEAN}, {"extra2", Types.BOOLEAN},
		{"extra3", Types.BOOLEAN}, {"totalScoring", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("callCenterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("campaignId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("product", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasEmail", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasPhone", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasName", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("extra1", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("extra2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("extra3", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("totalScoring", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LEAD_CallCenter (uuid_ VARCHAR(75) null,callCenterId LONG not null primary key,campaignId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dueDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title STRING null,description VARCHAR(75) null,source VARCHAR(75) null,type_ VARCHAR(75) null,product VARCHAR(75) null,hasEmail BOOLEAN,hasPhone BOOLEAN,hasName BOOLEAN,extra1 BOOLEAN,extra2 BOOLEAN,extra3 BOOLEAN,totalScoring INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table LEAD_CallCenter";

	public static final String ORDER_BY_JPQL = " ORDER BY callCenter.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LEAD_CallCenter.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.mx.movistar.col.lead.model.CallCenter"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.mx.movistar.col.lead.model.CallCenter"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.mx.movistar.col.lead.model.CallCenter"),
		true);

	public static final long CAMPAIGNID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long STATUS_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long TITLE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CallCenter toModel(CallCenterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CallCenter model = new CallCenterImpl();

		model.setUuid(soapModel.getUuid());
		model.setCallCenterId(soapModel.getCallCenterId());
		model.setCampaignId(soapModel.getCampaignId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDueDate(soapModel.getDueDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setSource(soapModel.getSource());
		model.setType(soapModel.getType());
		model.setProduct(soapModel.getProduct());
		model.setHasEmail(soapModel.isHasEmail());
		model.setHasPhone(soapModel.isHasPhone());
		model.setHasName(soapModel.isHasName());
		model.setExtra1(soapModel.isExtra1());
		model.setExtra2(soapModel.isExtra2());
		model.setExtra3(soapModel.isExtra3());
		model.setTotalScoring(soapModel.getTotalScoring());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CallCenter> toModels(CallCenterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CallCenter> models = new ArrayList<CallCenter>(soapModels.length);

		for (CallCenterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		mx.movistar.col.lead.service.util.ServiceProps.get(
			"lock.expiration.time.mx.movistar.col.lead.model.CallCenter"));

	public CallCenterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _callCenterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCallCenterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _callCenterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CallCenter.class;
	}

	@Override
	public String getModelClassName() {
		return CallCenter.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CallCenter, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CallCenter, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CallCenter, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CallCenter)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CallCenter, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CallCenter, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CallCenter)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CallCenter, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CallCenter, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CallCenter>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CallCenter.class.getClassLoader(), CallCenter.class,
			ModelWrapper.class);

		try {
			Constructor<CallCenter> constructor =
				(Constructor<CallCenter>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CallCenter, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CallCenter, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CallCenter, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CallCenter, Object>>();
		Map<String, BiConsumer<CallCenter, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CallCenter, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object uuid) {
					callCenter.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"callCenterId",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getCallCenterId();
				}

			});
		attributeSetterBiConsumers.put(
			"callCenterId",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object callCenterId) {
					callCenter.setCallCenterId((Long)callCenterId);
				}

			});
		attributeGetterFunctions.put(
			"campaignId",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getCampaignId();
				}

			});
		attributeSetterBiConsumers.put(
			"campaignId",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object campaignId) {
					callCenter.setCampaignId((Long)campaignId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object groupId) {
					callCenter.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object companyId) {
					callCenter.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object userId) {
					callCenter.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object userName) {
					callCenter.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object createDate) {
					callCenter.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object modifiedDate) {
					callCenter.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"dueDate",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getDueDate();
				}

			});
		attributeSetterBiConsumers.put(
			"dueDate",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object dueDate) {
					callCenter.setDueDate((Date)dueDate);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object status) {
					callCenter.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(
					CallCenter callCenter, Object statusByUserId) {

					callCenter.setStatusByUserId((Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(
					CallCenter callCenter, Object statusByUserName) {

					callCenter.setStatusByUserName((String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object statusDate) {
					callCenter.setStatusDate((Date)statusDate);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object title) {
					callCenter.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object description) {
					callCenter.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"source",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getSource();
				}

			});
		attributeSetterBiConsumers.put(
			"source",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object source) {
					callCenter.setSource((String)source);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object type) {
					callCenter.setType((String)type);
				}

			});
		attributeGetterFunctions.put(
			"product",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getProduct();
				}

			});
		attributeSetterBiConsumers.put(
			"product",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object product) {
					callCenter.setProduct((String)product);
				}

			});
		attributeGetterFunctions.put(
			"hasEmail",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getHasEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"hasEmail",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object hasEmail) {
					callCenter.setHasEmail((Boolean)hasEmail);
				}

			});
		attributeGetterFunctions.put(
			"hasPhone",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getHasPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"hasPhone",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object hasPhone) {
					callCenter.setHasPhone((Boolean)hasPhone);
				}

			});
		attributeGetterFunctions.put(
			"hasName",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getHasName();
				}

			});
		attributeSetterBiConsumers.put(
			"hasName",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object hasName) {
					callCenter.setHasName((Boolean)hasName);
				}

			});
		attributeGetterFunctions.put(
			"extra1",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getExtra1();
				}

			});
		attributeSetterBiConsumers.put(
			"extra1",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object extra1) {
					callCenter.setExtra1((Boolean)extra1);
				}

			});
		attributeGetterFunctions.put(
			"extra2",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getExtra2();
				}

			});
		attributeSetterBiConsumers.put(
			"extra2",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object extra2) {
					callCenter.setExtra2((Boolean)extra2);
				}

			});
		attributeGetterFunctions.put(
			"extra3",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getExtra3();
				}

			});
		attributeSetterBiConsumers.put(
			"extra3",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object extra3) {
					callCenter.setExtra3((Boolean)extra3);
				}

			});
		attributeGetterFunctions.put(
			"totalScoring",
			new Function<CallCenter, Object>() {

				@Override
				public Object apply(CallCenter callCenter) {
					return callCenter.getTotalScoring();
				}

			});
		attributeSetterBiConsumers.put(
			"totalScoring",
			new BiConsumer<CallCenter, Object>() {

				@Override
				public void accept(CallCenter callCenter, Object totalScoring) {
					callCenter.setTotalScoring((Integer)totalScoring);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCallCenterId() {
		return _callCenterId;
	}

	@Override
	public void setCallCenterId(long callCenterId) {
		_callCenterId = callCenterId;
	}

	@JSON
	@Override
	public long getCampaignId() {
		return _campaignId;
	}

	@Override
	public void setCampaignId(long campaignId) {
		_columnBitmask |= CAMPAIGNID_COLUMN_BITMASK;

		if (!_setOriginalCampaignId) {
			_setOriginalCampaignId = true;

			_originalCampaignId = _campaignId;
		}

		_campaignId = campaignId;
	}

	public long getOriginalCampaignId() {
		return _originalCampaignId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		_dueDate = dueDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getProduct() {
		if (_product == null) {
			return "";
		}
		else {
			return _product;
		}
	}

	@Override
	public void setProduct(String product) {
		_product = product;
	}

	@JSON
	@Override
	public boolean getHasEmail() {
		return _hasEmail;
	}

	@JSON
	@Override
	public boolean isHasEmail() {
		return _hasEmail;
	}

	@Override
	public void setHasEmail(boolean hasEmail) {
		_hasEmail = hasEmail;
	}

	@JSON
	@Override
	public boolean getHasPhone() {
		return _hasPhone;
	}

	@JSON
	@Override
	public boolean isHasPhone() {
		return _hasPhone;
	}

	@Override
	public void setHasPhone(boolean hasPhone) {
		_hasPhone = hasPhone;
	}

	@JSON
	@Override
	public boolean getHasName() {
		return _hasName;
	}

	@JSON
	@Override
	public boolean isHasName() {
		return _hasName;
	}

	@Override
	public void setHasName(boolean hasName) {
		_hasName = hasName;
	}

	@JSON
	@Override
	public boolean getExtra1() {
		return _extra1;
	}

	@JSON
	@Override
	public boolean isExtra1() {
		return _extra1;
	}

	@Override
	public void setExtra1(boolean extra1) {
		_extra1 = extra1;
	}

	@JSON
	@Override
	public boolean getExtra2() {
		return _extra2;
	}

	@JSON
	@Override
	public boolean isExtra2() {
		return _extra2;
	}

	@Override
	public void setExtra2(boolean extra2) {
		_extra2 = extra2;
	}

	@JSON
	@Override
	public boolean getExtra3() {
		return _extra3;
	}

	@JSON
	@Override
	public boolean isExtra3() {
		return _extra3;
	}

	@Override
	public void setExtra3(boolean extra3) {
		_extra3 = extra3;
	}

	@JSON
	@Override
	public int getTotalScoring() {
		return _totalScoring;
	}

	@Override
	public void setTotalScoring(int totalScoring) {
		_totalScoring = totalScoring;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CallCenter.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CallCenter.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CallCenter.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CallCenter toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CallCenter>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CallCenterImpl callCenterImpl = new CallCenterImpl();

		callCenterImpl.setUuid(getUuid());
		callCenterImpl.setCallCenterId(getCallCenterId());
		callCenterImpl.setCampaignId(getCampaignId());
		callCenterImpl.setGroupId(getGroupId());
		callCenterImpl.setCompanyId(getCompanyId());
		callCenterImpl.setUserId(getUserId());
		callCenterImpl.setUserName(getUserName());
		callCenterImpl.setCreateDate(getCreateDate());
		callCenterImpl.setModifiedDate(getModifiedDate());
		callCenterImpl.setDueDate(getDueDate());
		callCenterImpl.setStatus(getStatus());
		callCenterImpl.setStatusByUserId(getStatusByUserId());
		callCenterImpl.setStatusByUserName(getStatusByUserName());
		callCenterImpl.setStatusDate(getStatusDate());
		callCenterImpl.setTitle(getTitle());
		callCenterImpl.setDescription(getDescription());
		callCenterImpl.setSource(getSource());
		callCenterImpl.setType(getType());
		callCenterImpl.setProduct(getProduct());
		callCenterImpl.setHasEmail(isHasEmail());
		callCenterImpl.setHasPhone(isHasPhone());
		callCenterImpl.setHasName(isHasName());
		callCenterImpl.setExtra1(isExtra1());
		callCenterImpl.setExtra2(isExtra2());
		callCenterImpl.setExtra3(isExtra3());
		callCenterImpl.setTotalScoring(getTotalScoring());

		callCenterImpl.resetOriginalValues();

		return callCenterImpl;
	}

	@Override
	public int compareTo(CallCenter callCenter) {
		int value = 0;

		value = getTitle().compareTo(callCenter.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CallCenter)) {
			return false;
		}

		CallCenter callCenter = (CallCenter)obj;

		long primaryKey = callCenter.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CallCenterModelImpl callCenterModelImpl = this;

		callCenterModelImpl._originalUuid = callCenterModelImpl._uuid;

		callCenterModelImpl._originalCampaignId =
			callCenterModelImpl._campaignId;

		callCenterModelImpl._setOriginalCampaignId = false;

		callCenterModelImpl._originalGroupId = callCenterModelImpl._groupId;

		callCenterModelImpl._setOriginalGroupId = false;

		callCenterModelImpl._originalCompanyId = callCenterModelImpl._companyId;

		callCenterModelImpl._setOriginalCompanyId = false;

		callCenterModelImpl._setModifiedDate = false;

		callCenterModelImpl._originalStatus = callCenterModelImpl._status;

		callCenterModelImpl._setOriginalStatus = false;

		callCenterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CallCenter> toCacheModel() {
		CallCenterCacheModel callCenterCacheModel = new CallCenterCacheModel();

		callCenterCacheModel.uuid = getUuid();

		String uuid = callCenterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			callCenterCacheModel.uuid = null;
		}

		callCenterCacheModel.callCenterId = getCallCenterId();

		callCenterCacheModel.campaignId = getCampaignId();

		callCenterCacheModel.groupId = getGroupId();

		callCenterCacheModel.companyId = getCompanyId();

		callCenterCacheModel.userId = getUserId();

		callCenterCacheModel.userName = getUserName();

		String userName = callCenterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			callCenterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			callCenterCacheModel.createDate = createDate.getTime();
		}
		else {
			callCenterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			callCenterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			callCenterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			callCenterCacheModel.dueDate = dueDate.getTime();
		}
		else {
			callCenterCacheModel.dueDate = Long.MIN_VALUE;
		}

		callCenterCacheModel.status = getStatus();

		callCenterCacheModel.statusByUserId = getStatusByUserId();

		callCenterCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = callCenterCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			callCenterCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			callCenterCacheModel.statusDate = statusDate.getTime();
		}
		else {
			callCenterCacheModel.statusDate = Long.MIN_VALUE;
		}

		callCenterCacheModel.title = getTitle();

		String title = callCenterCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			callCenterCacheModel.title = null;
		}

		callCenterCacheModel.description = getDescription();

		String description = callCenterCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			callCenterCacheModel.description = null;
		}

		callCenterCacheModel.source = getSource();

		String source = callCenterCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			callCenterCacheModel.source = null;
		}

		callCenterCacheModel.type = getType();

		String type = callCenterCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			callCenterCacheModel.type = null;
		}

		callCenterCacheModel.product = getProduct();

		String product = callCenterCacheModel.product;

		if ((product != null) && (product.length() == 0)) {
			callCenterCacheModel.product = null;
		}

		callCenterCacheModel.hasEmail = isHasEmail();

		callCenterCacheModel.hasPhone = isHasPhone();

		callCenterCacheModel.hasName = isHasName();

		callCenterCacheModel.extra1 = isExtra1();

		callCenterCacheModel.extra2 = isExtra2();

		callCenterCacheModel.extra3 = isExtra3();

		callCenterCacheModel.totalScoring = getTotalScoring();

		return callCenterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CallCenter, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CallCenter, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CallCenter, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CallCenter)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CallCenter, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CallCenter, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CallCenter, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CallCenter)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CallCenter>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _callCenterId;
	private long _campaignId;
	private long _originalCampaignId;
	private boolean _setOriginalCampaignId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _dueDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _source;
	private String _type;
	private String _product;
	private boolean _hasEmail;
	private boolean _hasPhone;
	private boolean _hasName;
	private boolean _extra1;
	private boolean _extra2;
	private boolean _extra3;
	private int _totalScoring;
	private long _columnBitmask;
	private CallCenter _escapedModel;

}